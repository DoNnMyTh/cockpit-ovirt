import $ from 'jquery'
import cockpit from 'cockpit'

import {debugMsg, printError} from './helpers'

var translations = false

function getLang () {
  var lang = navigator.language
  if (navigator.languages != undefined)
    lang = navigator.languages[0]

  if (!lang) {
    lang = 'en'
  } else {
    lang = lang.split('-')[0].toLowerCase()
  }

  debugMsg('Using language: {0}'.format(lang))
  return lang
}

export function i18nInit () {
  var locale = getLang()
  // this file is generated by webpack from i18n.src.json for particular locale
  var i18nFile = 'i18n/i18n.' + locale + '.json'
  debugMsg('i18nFile: ' + i18nFile)

  if (locale === 'en') { // no translation needed
    return
  }

  // download translations for a locale
  $.getJSON(i18nFile).done(
    function (data) {
      translations = data
      if (data.hasOwnProperty('meta') && data.meta.hasOwnProperty('locale') && data.meta.locale === 'de' && data.hasOwnProperty('html') && data.hasOwnProperty('messages')) {
        debugMsg('i18n resource loaded and parsed: ' + i18nFile)
        translateHtml()
        return // ok
      }

      printError('Failed to parse ' + i18nFile + ' for locale: ' + locale)
      translations = undefined
    }).fail(function () {
      printError('Failed to load i18n resource: ' + i18nFile)
    })
}

export function gettext (text) {
  if (translations) {
    var t = translations.messages[text]
    if (t) {
      return t
    }

    debugMsg('Locale: {0}: Translation not found for: "{1}"'.format(translations.meta.locale, text))
  }
  // english locale or fallback
  return text
}

// translate ovirt.html to current locale
function translateHtml () {
  var html = translations.html
  for (var key in html) {
    $("[translate-id='" + key + "']").text(html[key])
  }
}
