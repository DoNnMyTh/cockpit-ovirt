---
- hosts: "{{ target }}"
  tasks:
    - name: "Set engine pub key as authorized key without validating the TLS/SSL certificates"
      authorized_key:
        key: "https://{{ FQDN }}/ovirt-engine/services/pki-resource?resource=engine-certificate&format=OPENSSH-PUBKEY"
        state: present
        user: root
        validate_certs: false
    - name: "Obtain SSO token using username/password credentials"
      ovirt_auth:
        insecure: true
        password: "{{ ADMIN_PASSWORD }}"
        url: "https://{{ FQDN }}/ovirt-engine/api"
        username: admin@internal
      register: ovirt_sso_auth
      until: ovirt_sso_auth|succeeded
      retries: 50
      delay: 10
    - name: "Fetch host facts"
      delay: 10
      ovirt_hosts_facts:
        auth: "{{ ovirt_auth }}"
        pattern: "name={{ HOST_NAME }}"
      register: host_result
      retries: 50
      until: "host_result and 'ansible_facts' in host_result and 'ovirt_hosts' in host_result.ansible_facts and host_result.ansible_facts.ovirt_hosts|length >= 1 and 'up' in host_result.ansible_facts.ovirt_hosts[0].status"

    - name: Fetch cluster ID
      set_fact: cluster_id="{{ host_result.ansible_facts.ovirt_hosts[0].cluster.id }}"
    - name: Fetch cluster facts
      ovirt_cluster_facts:
        auth: "{{ ovirt_auth }}"
      register: cluster_facts
    - name: "Fetch datacenter facts"
      ovirt_datacenter_facts:
        auth: "{{ ovirt_auth }}"
      register: datacenter_facts
    - name: "Fetch datacenter id"
      set_fact: "datacenter_id={{ ovirt_clusters|json_query(\"[?id=='\" + cluster_id + \"'].data_center.id\")|first }}"
    - name: "Fetch datacenter_name"
      set_fact: "datacenter_name={{ ovirt_datacenters|json_query(\"[?id=='\" + datacenter_id + \"'].name\")|first }}"
    - name: "Add glusterfs storage domain"
      ovirt_storage_domains:
        auth:
          insecure: true
          password: "{{ ADMIN_PASSWORD }}"
          url: "https://{{ FQDN }}/ovirt-engine/api"
          username: admin@internal
        data_center: "{{ datacenter_name }}"
        glusterfs:
          address: "{{ STORAGE_DOMAIN_ADDR }}"
          mount_options: "{{ MOUNT_OPTIONS }}"
          path: "{{ STORAGE_DOMAIN_PATH }}"
        host: "{{ HOST_NAME }}"
        name: "{{ STORAGE_DOMAIN_NAME }}"
        wait: true
  user: root
